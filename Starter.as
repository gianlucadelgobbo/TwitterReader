package {	import flash.display.MovieClip;	import flash.display.StageAlign;    import flash.display.StageScaleMode;	import flash.xml.XMLDocument;	import flash.utils.*;	import flash.display.Loader;	import flash.external.ExternalInterface;	import flash.system.fscommand;	import flash.ui.Keyboard;	//	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.*;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import com.adobe.serialization.json.JSON;	import flash.text.StyleSheet;	import flash.text.Font;	//	public class Starter extends MovieClip {		public var myOrologio;		public var myCarosello;		public var myPanel;		var style;		var index = 0;		var max = 2;		var day;		var feed;		var c;		var d;		var o;		//var movOrder = [4,3,2,1,0,1,2,3,4];		var movOrder = [0,1,2,3,4];		var loader:URLLoader;		var req:URLRequest;		public function Starter() {			addEventListener(Event.ADDED_TO_STAGE, restarter);		}		public function restarter(event:Event):void {			myOrologio = new orologio();			myCarosello = new carosello();			myPanel = new panel();			/*			myPanel.x = (stage.stageWidth-myPanel.width)/2			myPanel.y = (stage.stageHeight-myPanel.height)/2			stage.showDefaultContextMenu = false;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			*/			this.addChild(myOrologio);			this.addChild(myCarosello);			this.addChild(myPanel);			loader = new URLLoader();			req = new URLRequest();			style = new StyleSheet();			/*			var embeddedFontsArray:Array = Font.enumerateFonts(false);			embeddedFontsArray.sortOn("fontName");			for (var a in embeddedFontsArray) {				trace(a + " " + embeddedFontsArray[a].fontName);			}			*/            var link:Object = new Object();            //link.fontWeight = "bold";            link.color = "#0082A1";            //link.display = "block";            //link.fontFamily = embeddedFontsArray[0].fontName;            //link.fontWeight = "bold";            var linkOver:Object = new Object();            //linkOver.fontWeight = "bold";            linkOver.color = "#666666";			var body:Object = new Object();            //body.fontFamily = embeddedFontsArray[0].fontName;            //body.fontWeight = "bold";            var span:Object = new Object();            //span.fontFamily = embeddedFontsArray[1].fontName;            span.fontWeight = "normal";            span.fontSize = 45;            style.setStyle("a", link);            style.setStyle("a:hover", linkOver);            style.setStyle("p", body);            style.setStyle("div", span);			myPanel.q.addEventListener(KeyboardEvent.KEY_DOWN, checkEnter);			myPanel.day.addEventListener(KeyboardEvent.KEY_DOWN, checkEnter);			myPanel.max.addEventListener(KeyboardEvent.KEY_DOWN, checkEnter);			var tmp = new Date();			myPanel.day.text = tmp.getDate()+"/"+(tmp.getMonth()+1)+"/"+tmp.getFullYear();		}		function checkEnter(event:KeyboardEvent):void {            trace("keyDownHandler: " + event.keyCode);			if(event.keyCode == Keyboard.ENTER) {				this.stage.focus=parent;				loadQuery()				myPanel.visible = false;			}		}		function loadQuery() {           	myCarosello.testo.testo.styleSheet = myOrologio.testo.styleSheet = style;			req.url = "http://search.twitter.com/search.json?q="+myPanel.q.text;			req.url = req.url.replace( /^([\s|\t|\n]+)?(.*)([\s|\t|\n]+)?$/gm, "$2" );			max = parseInt(myPanel.max.text);			var tmp = myPanel.day.text.split("/");			day = myPanel.day.text;			/*			req.method = URLRequestMethod.POST;			var paramsList:String = "";			var count = 1;			for (var key:String in _params) {				if (count == _numParams) {					paramsList +=  '"' + key + '": "' + _params[key] + '" ';				} else {					paramsList +=  '"' + key + '": "' + _params[key] + '", ';				}				count++;			}			*/			req.data = new URLVariables();			//req.data.request = '[{"name":"myreturn", "method":"' + _action + '", "params" : { ' + paramsList + ' } }]';			//req.data.PHPSESSID = _sessionId;			loader.addEventListener(Event.COMPLETE, decodeJSONfirstTime);			loadTweets();		}		function loadTweets() {			loader.load(req);		}		public function decodeJSONfirstTime(event:Event):void {			var Json = JSON.decode(event.target.data) ;			updateFeed(Json.results);			loader.removeEventListener(Event.COMPLETE, decodeJSONfirstTime);			loader.addEventListener(Event.COMPLETE, decodeJSON);			d = setInterval(loadTweets,6000);			index = 0;			if (feed.length) myCarosello.testo.testo.htmlText = feed[index];			c = setInterval(leggi,4000);			this.addEventListener(Event.ENTER_FRAME,clock);		}		public function decodeJSON(event:Event):void {			var Json = JSON.decode(event.target.data) ;			updateFeed(Json.results);			//traceObj(Json);			//_successCallback(Json.myreturn)		}		function replaceURLWithHTMLLinks(text) {			var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/i;			return text.replace(exp,"<a href='$1' target='_blank'>$1</a>"); 		}		function updateFeed(obj):void {			//obj = {0:{text:"6"},1:{text:"5"},2:{text:"4"},3:{text:"3"},4:{text:"2"},5:{text:"1"},6:{text:"0"}};			feed = new Array();			//traceObj(obj)			for(var o in obj) {				if (feed.length<max) {					if (day) {						var tmpA = day.split("/");						var tmp = new Date();						tmp.setDate(tmpA[0])						tmp.setMonth(tmpA[1]-1)						tmp.setFullYear(tmpA[2]);						tmp.setHours(0);						tmp.setMinutes(0);						var tmp2 = new Date(obj[o].created_at);						if (tmp2>tmp && feed.length<max) {							feed.push("<p>"+replaceURLWithHTMLLinks(obj[o].text)+"</p>");						}					} else {						feed.push("<p>"+replaceURLWithHTMLLinks(obj[o].text)+"</p>");					}				}			}		}		function clock(e):void {			var tmp = new Date();			var tmpA = tmp.toString().split(" ");			myOrologio.testo.htmlText = ("<p>"+tmpA[1]+" "+tmpA[2]+"</p><div>"+tmpA[3]+"</div>").toUpperCase();		}		function leggi():void {			trace(feed.length)				if (index+1<feed.length) {					index++;				} else {					trace("YYYYYYYYYYYYYYY"+index)					index = 0;				}				if (feed.length) myCarosello.testo.testo.htmlText = feed[index];			/*for(var a=0;a<movOrder.length;a++) {				trace("texto "+movOrder[a]+" "+a+" "+index);				testo["texto"+movOrder[a]].testo.styleSheet = style;				testo["texto"+movOrder[a]].testo.htmlText = feed[index];				if (index+1<feed.length) {					index++;				} else {					trace("YYYYYYYYYYYYYYY"+index)					index = 0;				}			}			movOrder.push(movOrder.shift()); 			testo.play();			*/			trace("fin "+index)		}		function traceObj(obj,basename=""):void {			for(var o in obj) {				if(!obj[o] is Object) {					trace(basename+o+" => "+obj[o]);				}				traceObj(obj[o],basename+o+".")			}		}/*		function setUserInfo(e):void {			Preferences.pref.userImg_small = e.message.rows["0"].img_small;			Preferences.pref.userName = e.message.rows["0"].user_name;		}								function xmlNotLoaded(event:Event):void {			trace("Data not loaded."+event);		}		public function startup(event:Event) {			Preferences.pref.libraryList = new XMLDocument();			Preferences.pref.libraryList.ignoreWhite = true;			Preferences.pref.libraryList.parseXML(myLoader.data);			interfaceDrawer()			stage.addEventListener(Event.RESIZE, resizer);		}		public function resizer(event:Event) {			Preferences.pref.w = stage.stageWidth;			Preferences.pref.h = stage.stageHeight;			Preferences.pref.monitorTrgt.resizer(stage.stageWidth,stage.stageHeight);			Preferences.pref.interfaceTrgt.setPos()		}		function interfaceDrawer() {			//this.removeChildAt(0);			this.myAlt  = new Alt();			Preferences.pref.myAlt = this.myAlt;			Preferences.pref.ch = 0;			monitor = new VJTVMonitor(0,0,Preferences.pref.w, Preferences.pref.h);			flxerInterface = new VJTVInterface();			this.addChild(monitor);			this.addChild(flxerInterface);			this.addChild(myAlt);			if (Preferences.pref.vKS) {			}		}		*/		public static function myReplace(str, search, replace) {			var temparray = str.split(search);			str = temparray.join(replace);			return str;		}	}}